openapi: 3.0.0
info:
  title: User-Management
  description: ユーザーを名前と生年月日で登録しIDに紐づけて管理するAPIです。
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: ユーザー情報を取得する
    description: "全件取得・ID検索・名前検索"
  - name: "ユーザーを新規に登録する"
    description: "新規にユーザーを登録しIDを取得する"
  - name: "ユーザー情報を更新する"
    description: "登録されているユーザーの情報IDで検索し更新する"
  - name: "ユーザー情報を削除する"
    description: "ユーザー情報をIDで検索し削除する"


paths:
  /users:
    get:
      tags:
        - ユーザー情報を取得する
      summary: 登録されているユーザーを取得する。
      description: クエリパラメータで入力された条件に合致するユーザーを取得する。条件を入力しない場合は全件ユーザー情報を取得する
      parameters:
        - name: name
          in: query
          description: 名前に入力した文字が含まれる人が検索される
          required: false
          schema:
            type: string
            example: y

      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  - id: 1
                    name: "yuichi"
                    birthday: "1984-07-03"
                  - id: 2
                    name: "kanayo"
                    birthday: "1993-12-31"


    post:
      tags:
        - ユーザーを新規に登録する
      summary: リクエストボディのjson形式のユーザー情報にidを自動採番して登録する。
      description: リクエストボディにjson形式でnameとbirthdayを入力。その際Validationエラーあり。name NotBlank, birthday yyyy/mm/ddフォーマット
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: false
                  example: "tom"
                birthday:
                  type: string
                  nullable: false
                  example: "1990/01/01"
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user created"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        filed:
                          type: string
                example:
                  status: "BAD_REQUEST"
                  message: "validation error"
                  errors:
                    - field: "birthday"
                      message: "YYYY/MM/ddで入力して下さい"

  /users/{id}:
    get:
      tags:
        - ユーザー情報を取得する
      summary: 指定したIDでユーザー情報を取得する。
      description: 指定したPathをIDとして取得しそのIDに紐づいたユーザーを取得する。
      parameters:
        - name: id
          in: path
          required: true
          description: 取得するユーザーのID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
    
    patch:
      tags:
        - "ユーザー情報を更新する"
      summary: 指定したIDでユーザー情報を取得し変更する。
      description: 指定したPathをIDとして取得しそのIDに紐づいたユーザーのnameやbirthdayをリクエストボディから更新する。
      parameters:
        - name: id
          in: path
          required: true
          description: 更新するユーザーのID
          schema:
            type: integer
            example: 4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: false
                  example: "ken"
                birthday:
                  type: string
                  nullable: false
                  example: "2002/05/05"
      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user updated!

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

    
    delete:
      tags:
        - ユーザー情報を削除する
      summary: 指定したIDでユーザー情報を取得する。
      description: 指定したPathをIDとして取得しそのIDに紐づいたユーザーを削除する。
      parameters:
        - name: id
          in: path
          required: true
          description: 削除するユーザーのID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: a deleted user!
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'

components:
  schemas:
    User:
      description: "Entityクラス"
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "yuichi"
        birthday:
          type: string
          example: "1984-07-03"


    UserNotFoundException:
      description: "ID検索時、ユーザーが見つからなかった場合のレスポンス"
      type: object
      properties:
        message:
          type: string
          example: "user not found with id: 99"
        status:
          type: string
          example: "404"
        path:
          type: string
          example: "/users/99"
        error:
          type: string
          example: "Not Found"
        timestamp:
          type: string
          format: date-time
          example: "2024-06-02T23:25:46.314631+09:00[Asia/Tokyo]"


    ValidationErrorResponse:
      description: "登録時、更新時にリクエストボディに指定されたフォーマット以外でリクエストした時、Validationエラーを変えすレスポンス"
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              filed:
                type: string

      example:
        status: "BAD_REQUEST"
        message: "validation error"
        errors:
          - field: "birthday"
            message: "YYYY/MM/ddで入力して下さい"
